package com.fidelity.integration;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.Connection;
import java.time.LocalDate;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.jdbc.JdbcTestUtils;

import com.fidelity.model.Car;
import com.fidelity.model.CarEngine;
import com.fidelity.model.CarEngineType;
import com.fidelity.model.Client;
import com.fidelity.model.ClientRisk;

class ClientDaoImplTest {
	
	private JdbcTemplate jdbcTemplate;
	private DbTestUtils dbTestUtils;
	private ClientDao dao;
	private SimpleDataSource dataSource;
	private Connection connection;
	private TransactionManager transactionManager;

	@BeforeEach
	void setUp() throws Exception {
		dataSource = new SimpleDataSource();
		connection = dataSource.getConnection();
		dao = new ClientDaoImpl(dataSource);
		transactionManager = new TransactionManager(dataSource);
		transactionManager.startTransaction(); 
		dbTestUtils = new DbTestUtils(connection);		
		jdbcTemplate = dbTestUtils.initJdbcTemplate();
	}

	@AfterEach
	void tearDown() throws Exception {
		transactionManager.rollbackTransaction();
		dataSource.shutdown();
	}

	@Test
	@DisplayName("Positive - should create dao object")
	void shouldCreate() {
		assertNotNull(dao);
	}
	
	@Test
	@DisplayName("Negative - should not return null on calling the get method")
	void shouldNotReturnNull() {
		assertNotNull(dao.getClients());
	}
	
	@Test
	@DisplayName("Positive - should have entries in the list")
	void shouldHaveSomeDataInTheList() {
		assertTrue(dao.getClients().size() > 0);
	}
	
	@Test
	@DisplayName("Positive - list returned in order of client id") 
	void shouldReturnInOrderOfClientId() {
		int id = 5;
		List<Client> list = dao.getClients();
		assertEquals(id, list.get(4).getClientId());
	}
	
	@Test
	@DisplayName("Negative - insert with existing client id")
	void testInsertCarIncrementsTableSize() {
	    Client client = new Client(5, "Tony Stark", ClientRisk.POLITICAL, "+455203172212");
	    assertThrows(DatabaseException.class, ()-> {
	    	dao.insertClient(client);
	    });
	}
	
	@Test
	@DisplayName("Positive - succesful insert with all fields")
	void testInsertClientIncrementsTableSize() {
	    int oldSize = JdbcTestUtils.countRowsInTable(jdbcTemplate, "aa_client");
	    Client client = new Client(7, "Tony Stark", ClientRisk.POLITICAL, "+455203172212");
	    dao.insertClient(client);

	    int newSize = JdbcTestUtils.countRowsInTable(jdbcTemplate, "aa_client");

	    assertEquals(oldSize + 1, newSize);
	}
	
	@Test
	@DisplayName("Positive - row exists after insertion with the given condition")
	void insertCLientTableValid() {
		assertEquals(0, JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "aa_client", "id=7"));
		Client client = new Client(7, "Tony Stark", ClientRisk.POLITICAL, "+455203172212");
		dao.insertClient(client);
		assertEquals(1, JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "aa_client", "id=7"));
	}
}
