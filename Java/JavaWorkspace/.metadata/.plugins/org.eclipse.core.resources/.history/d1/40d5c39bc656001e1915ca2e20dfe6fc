package com.fidelity.integration;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fidelity.model.Client;
import com.fidelity.model.ClientRisk;

public class ClientDaoImpl implements ClientDao {
	
	private DataSource dataSource;
	private final Logger logger = LoggerFactory.getLogger(getClass());

	public ClientDaoImpl(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	
	private void handleDatabaseException(String message, SQLException e) {
        e.printStackTrace();
        logger.error(message, e);
        throw new DatabaseException(message, e);
    }

    private void closeConnectionAndStatement(Connection connection, PreparedStatement statement) {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                logger.error("Cannot close connection", e);
            }
        }
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException e) {
                logger.error("Cannot close statement", e);
            }
        }
    }
    
    private List<Client> executeQuery(String sql, Object... params ) {
		List<Client> clientList = new ArrayList<>();
		Client client;
		PreparedStatement statement = null;
		Connection connection = null;

		try {
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(sql);

			for (int i = 0; i < params.length; i++) {
				statement.setObject(i + 1, params[i]);
			}

			ResultSet resultSet = statement.executeQuery();
			
			while (resultSet.next()) {
				int clientId = resultSet.getInt("CLIENT_ID");
				String clientName = resultSet.getString("CLIENT_NAME");
				String risk = resultSet.getString("CLIENT_RISK");
				ClientRisk clientRisk = ClientRisk.of(risk);
				String workPhone = resultSet.getString("PHONE_NUMBER");
				
				client = new Client(clientId, clientName, clientRisk, workPhone);
				clientList.add(client);
			}

		} catch (SQLException e) {
			handleDatabaseException("Cannot execute SQL query", e);
		} finally {
			closeConnectionAndStatement(connection, statement);
		}
		return clientList;
	}

	@Override
	public List<Client> getClients() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void insertClient(Client client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteClient(int clientId) {
		// TODO Auto-generated method stub

	}

}
