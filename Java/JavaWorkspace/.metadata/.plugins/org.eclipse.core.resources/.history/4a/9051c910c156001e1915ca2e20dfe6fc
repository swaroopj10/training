package com.fidelity.integration;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.ArrayList;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.jdbc.JdbcTestUtils;

import com.fidelity.model.PhoneContract;

class PhoneContractDaoImplTest {
	
	private JdbcTemplate jdbcTemplate;
	private DbTestUtils dbTestUtils;
	private PhoneContractDao dao;
	private SimpleDataSource dataSource;
	private Connection connection;
	private TransactionManager transactionManager;

	@BeforeEach
	void setUp() throws Exception {
		dataSource = new SimpleDataSource();
		connection = dataSource.getConnection();
		dao = new PhoneContractDaoImpl(dataSource);
		transactionManager = new TransactionManager(dataSource);
		transactionManager.startTransaction(); 
		dbTestUtils = new DbTestUtils(connection);		
		jdbcTemplate = dbTestUtils.initJdbcTemplate();
	}

	@AfterEach
	void tearDown() throws Exception {
		transactionManager.rollbackTransaction();
		dataSource.shutdown();
	}

	@Test
	void notNull() {
		assertNotNull(dao.getFullPhoneContracts());
	}
	
	@Test
	void correctTableSize() {
		assertTrue(dao.getFullPhoneContracts().size() > 1);
	}
	
	@Test
	void correctTableSizeWithId() {
		assertTrue(dao.getPhoneContractByID(3).size() > 1);
	}
	
	@Test
	@DisplayName("Positive - should create dao object")
	void shouldCreate() {
		assertNotNull(dao);
	}
	
	@Test
	@DisplayName("Negative - should not return null as list")
	void shouldNotReturnNull() {
		List phoneContractsList = dao.getFullPhoneContracts();
		assertNotNull(phoneContractsList);
	}
	
	@Test
	@DisplayName("Positive - should have some records in the list")
	void shouldHaveSomeDataInTheList() {
		List phoneContractsList = dao.getFullPhoneContracts();
		assertTrue(phoneContractsList.size()>0);
	}
	
	@Test
	@DisplayName("Negative - Should throw Exception When Id not null")
	void shouldThrowExceptionWhenIdNotFound() {
		Exception exception = assertThrows(DatabaseException.class, ()->{
			
			List phoneContractsList = dao.getPhoneContractByID(1000);
			
		});
		assertEquals(exception.getMessage(), "No phone contract with that ID found");
		
	}
	
	@Test
	@DisplayName("Positive - By id should have some records in the list")
	void shouldHaveSomeDataInTheListWhenById() {
		List phoneContractsList = dao.getPhoneContractByID(1);
		assertTrue(phoneContractsList.size()>0);
	}
	
	@Test
	@DisplayName("Positive - Get by id phone contracts should have correct Id")
	void shouldHaveCorrectId() {
		
			List<PhoneContract> phoneContractsList = dao.getPhoneContractByID(1);
			for(PhoneContract phoneContract:phoneContractsList) {
				assertEquals(phoneContract.getPhoneContractId(), 1);
			}
			
	}
	
	@Test
	  void testQueryAllPhoneRecords() throws SQLException {
	    List<PhoneContract> phoneContractList= dao.getFullPhoneContracts();
	      assertFalse(phoneContractList.isEmpty());
	    for (PhoneContract phoneContract : phoneContractList) {
	      assertEquals(false,phoneContract.getPhoneContractName().isEmpty());
	      assertEquals(false,phoneContract.getRateName().isEmpty());
	      assertNotNull(phoneContract.getTotalValue());
	    }

	  }
	  @Test
	  void testQueryPhoneById(){
	    List<PhoneContract> phoneContracts= dao.getPhoneContractByID(1);
	    assertNotNull(phoneContracts);
	    assertFalse(phoneContracts.isEmpty());
	  }
	  @Test
	  void testValuesOfQueryPhoneById(){
	    List<PhoneContract> phoneContractList= dao.getPhoneContractByID(1);
	    for (PhoneContract phoneContract : phoneContractList) {
	      assertEquals(1, phoneContract.getPhoneContractId());

	    }
	  }
	  @Test
	  void testValuesOfQueryPhoneByIdEmpty(){
	    List<PhoneContract> phoneContractList= dao.getPhoneContractByID(1000);
	    assertTrue(phoneContractList.isEmpty());
	  }
	  @Test
	  void testQueryByPhoneIdException(){
	    assertThrows(IllegalArgumentException.class,()->{
	      dao.getPhoneContractByID(-1);
	    });

	  }

	  @Test
	  void testCalculateTotalValueDoesNotFail(){
		  List<PhoneContract> mainPhoneContractList;
		  PhoneContract phoneContract1 = new PhoneContract(1, "Sample Contract 1", "Sample Rate 1", 10, new BigDecimal("500.00"));
		    PhoneContract phoneContract2 = new PhoneContract(2, "Sample Contract 2", "Sample Rate 2", 5, new BigDecimal("250.00"));
		    mainPhoneContractList= new ArrayList<>();
		    mainPhoneContractList.add(phoneContract1);
		    mainPhoneContractList.add(phoneContract2);
		    
	    assertDoesNotThrow(()->{
	      BigDecimal value= dao.calculateTotalValue(mainPhoneContractList);
	    });

	  }
	  @Test
	  void testCalculateTotalValue(){
		  List<PhoneContract> mainPhoneContractList;
		  PhoneContract phoneContract1 = new PhoneContract(1, "Sample Contract 1", "Sample Rate 1", 10, new BigDecimal("500.00"));
		    PhoneContract phoneContract2 = new PhoneContract(2, "Sample Contract 2", "Sample Rate 2", 5, new BigDecimal("250.00"));
		    mainPhoneContractList= new ArrayList<>();
		    mainPhoneContractList.add(phoneContract1);
		    mainPhoneContractList.add(phoneContract2);
	      BigDecimal value= dao.calculateTotalValue(mainPhoneContractList);
	      assertEquals(new BigDecimal("750.00"), value);
	    int scale = value.scale(); // Get the number of decimal places
	    assertEquals(2, scale, "Total value should have exactly 2 decimal places.");
	  }
	  @Test
	  void testCalculateTotalValueException(){
		  List<PhoneContract> mainPhoneContractList;
		  PhoneContract phoneContract1 = new PhoneContract(1, "Sample Contract 1", "Sample Rate 1", 10, new BigDecimal("500.00"));
		    PhoneContract phoneContract2 = new PhoneContract(2, "Sample Contract 2", "Sample Rate 2", 5, new BigDecimal("250.00"));
		    mainPhoneContractList= new ArrayList<>();
		    mainPhoneContractList.add(phoneContract1);
		    mainPhoneContractList.add(phoneContract2);
	    assertThrows(IllegalArgumentException.class,()->{
	      BigDecimal value= dao.calculateTotalValue(null);
	    });
	  }
}
