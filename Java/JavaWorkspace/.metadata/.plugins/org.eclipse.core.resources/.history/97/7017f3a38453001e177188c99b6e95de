package com.fidelity.integration;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.Date;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fidelity.model.Employee;
import com.fidelity.model.PerformanceReview;

public class EmployeeDaoOracleImpl extends EmployeeDao {

    private final Logger logger = LoggerFactory.getLogger(getClass());

    public EmployeeDaoOracleImpl(DataSource datasource) {
        super(datasource);
    }

    private List<Employee> executeQuery(String sql, Object... params) {
        List<Employee> employeeList = new ArrayList<>();
        PreparedStatement statement = null;
        Connection connection = null;

        try {
            connection = getDataSource().getConnection();
            statement = connection.prepareStatement(sql);

            for (int i = 0; i < params.length; i++) {
                statement.setObject(i + 1, params[i]);
            }

            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                Employee employee = new Employee(resultSet.getInt("EMPNO"),
                        resultSet.getString("ENAME"),
                        resultSet.getString("JOB"),
                        resultSet.getInt("MGR"),
                        resultSet.getDate("hiredate").toLocalDate(),
                        resultSet.getBigDecimal("SAL"),
                        resultSet.getBigDecimal("COMM"),
                        resultSet.getInt("DEPTNO"));
                employeeList.add(employee);
            }

        } catch (SQLException e) {
            handleDatabaseException("Cannot execute SQL query", e);
        } finally {
            closeConnectionAndStatement(connection, statement);
        }

        return employeeList;
    }

    private void handleDatabaseException(String message, SQLException e) {
        e.printStackTrace();
        logger.error(message, e);
        throw new DatabaseException(message, e);
    }

    private void closeConnectionAndStatement(Connection connection, PreparedStatement statement) {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                logger.error("Cannot close connection", e);
            }
        }
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException e) {
                logger.error("Cannot close statement", e);
            }
        }
    }

    @Override
    public List<Employee> queryAllEmployees() {
        String sql = "SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp";
        return executeQuery(sql);
    }
    
    @Override
    public List<Employee> queryAllEmployeesWithPerformanceReview() {
        String sql = "SELECT e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno, ep.perf_rev_code FROM emp e JOIN emp_perf ep ON e.empno = ep.empno";
        return queryEmployeesWithPerformanceReview(sql);
    }

    @Override
    public List<Employee> queryAllEmployeesWithPerformanceReviewWithEmpNo(int empNo) {
        String sql = "SELECT e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno, ep.perf_rev_code FROM emp e JOIN emp_perf ep ON e.empno = ep.empno WHERE e.empno = ?";
        return queryEmployeesWithPerformanceReview(sql, empNo);
    }

    private List<Employee> queryEmployeesWithPerformanceReview(String sql, Object... params) {
        List<Employee> employeeList = new ArrayList<>();
        PreparedStatement statement = null;
        Connection connection = null;

        try {
            connection = getDataSource().getConnection();
            statement = connection.prepareStatement(sql);

            for (int i = 0; i < params.length; i++) {
                statement.setObject(i + 1, params[i]);
            }

            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                Employee employee = new Employee(resultSet.getInt("EMPNO"),
                        resultSet.getString("ENAME"),
                        resultSet.getString("JOB"),
                        resultSet.getInt("MGR"),
                        resultSet.getDate("hiredate").toLocalDate(),
                        resultSet.getBigDecimal("SAL"),
                        resultSet.getBigDecimal("COMM"),
                        resultSet.getInt("DEPTNO"));

                int performanceCode = resultSet.getInt("perf_rev_code");
                PerformanceReview performanceReview = PerformanceReview.of(performanceCode);
                employee.setPerformanceReview(performanceReview);
                employeeList.add(employee);
            }
        } catch (SQLException e) {
            handleDatabaseException("Cannot execute SQL query", e);
        } finally {
            closeConnectionAndStatement(connection, statement);
        }

        return employeeList;
    }

    @Override
    public Employee queryEmployeeById(int empNo) {
        String sql = "SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp WHERE empno = ?";
        List<Employee> employees = executeQuery(sql, empNo);
        return employees.isEmpty() ? null : employees.get(0);
    }

    @Override
    public List<Employee> queryEmployeeByName(String name) {
        String sql = "SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp WHERE ename = ?";
        return executeQuery(sql, name);
    }

    @Override
    public List<Employee> queryEmployeeByDeptName(int deptNo) {
        String sql = "SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp WHERE deptno = ?";
        return executeQuery(sql, deptNo);
    }

    @Override
    public void insertEmployee(Employee newEmployee) {
        String sql = "INSERT INTO emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) VALUES (?,?,?,?,?,?,?,?)";
        executeUpdate(sql,
                newEmployee.getEmpNumber(),
                newEmployee.getEmpName(),
                newEmployee.getJob(),
                newEmployee.getMgrNumber(),
                Date.valueOf(newEmployee.getHireDate()),
                newEmployee.getSalary(),
                newEmployee.getComm(),
                newEmployee.getDeptNumber());
    }

    @Override
    public void updateEmployee(Employee employee) {
        String sql = "UPDATE emp SET ename = ?, job = ? WHERE empno=?";
        executeUpdate(sql, employee.getEmpName(), employee.getJob(), employee.getEmpNumber());
    }

    @Override
    public void deleteEmployee(Employee employee) {
        String sql = "DELETE FROM emp WHERE ename = ?";
        executeUpdate(sql, employee.getEmpName());
    }

    private void executeUpdate(String sql, Object... params) {
        PreparedStatement statement = null;
        Connection connection = null;
        try {
            connection = getDataSource().getConnection();
            statement = connection.prepareStatement(sql);
            
            for (int i = 0; i < params.length; i++) {
                statement.setObject(i + 1, params[i]);
            }
            
            statement.executeUpdate();
        } catch (SQLException e) {
            handleDatabaseException("Cannot execute SQL query", e);
        } finally {
            closeConnectionAndStatement(connection, statement);
        }
    }
}
